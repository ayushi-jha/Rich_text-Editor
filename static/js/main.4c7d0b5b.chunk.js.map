{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","onChange","editorState","setState","x","getCurrentContent","getPlainText","console","log","text","i","words","replace","split","len","length","document","getElementById","innerHTML","view_count","handleKeyCommand","command","newState","RichUtils","state","EditorState","createWithContent","ContentState","createFromText","setTimeout","id","className","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wOAwDqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,SAAW,SAACC,GAEV,EAAKC,SAAS,CAACD,gBACL,IAAME,EAAIF,EAAYG,oBAAoBC,aAAa,QAEjEC,QAAQC,IAnER,SAAqBC,GAGjB,IAAIC,EAAI,EAORC,GADJF,GAFAA,GAFAA,EAAOA,EAAKG,QAAQ,kBAAkB,KAE1BA,QAAQ,WAAW,MAEnBA,QAAQ,WAAW,MACdC,MAAM,KACnBC,EAAM,EACV,IAAKJ,EAAI,EAAIA,EAAIC,EAAMI,OAAQL,IAEb,KAAZC,EAAMD,IAAyB,IAAZC,EAAMD,KAC7BI,GAAO,GA6BT,OAzBAE,SAASC,eAAe,SAASC,UAAY,UAAYJ,EAAM,IAG7DE,SAASC,eAAgB,SAASC,WAD/BJ,GAAO,IACqC,6DAEvCA,GAAO,IACiC,yCAExCA,GAAO,KACiC,2CAExCA,GAAO,IACiC,4CAExCA,GAAO,IACiC,yCAExCA,GAAO,KACiC,oDAGA,GAI3CA,EAuBKK,CAAWf,KAjBN,EAmBnBgB,iBAAmB,SAACC,GAAa,IAAMC,EAAWC,YAAUH,iBAAiB,EAAKI,MAAMtB,YAAamB,GACnG,OAAIC,GACF,EAAKrB,SAASqB,GACP,WAEF,eAtBP,EAAKE,MAAQ,CAACtB,YAAauB,cAAYC,kBAAkBC,eAAaC,eAAe,gHAFpE,E,iFAMjBC,YAAW,cAGR,O,+BAmBH,OACE,yBAAKC,GAAG,WACN,+CACA,iHACA,yBAAKA,GAAG,UACP,yBAAKA,GAAK,UAAUC,UAAU,UAC7B,kBAAC,SAAD,CACE7B,YAAa8B,KAAKR,MAAMtB,YACxBD,SAAU+B,KAAK/B,SACfmB,iBAAoBY,KAAKZ,yB,GAtCJa,IAAMC,WC5CnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAASC,eAAe,SD2H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.4c7d0b5b.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Editor, EditorState, RichUtils, ContentState} from 'draft-js';\nimport ReactDOM from 'react-dom';\n\n// Function to count the number of words in the text box.\n    function view_count (text) {\n        // Find html elements.\n        \n        var i = 0;\n    //remove whitespace before and after end of text\n    text = text.replace(/(^\\s*)|(\\s*$)/gi,\"\");\n    // replace newline if it occurs at least once with single whitespace\n    text = text.replace(/\\n{1,}/gi,\" \");\n    // replace whitespace if it occurs at least twice with single whitespace\n    text = text.replace(/\\s{2,}/gi,\" \");\n    var words = text.split(\" \");\n    var len = 0;\n    for (i = 0 ; i < words.length; i++)\n    {\n      if (words[i] != \" \" && words[i] != \"\"){\n      len += 1 ;\n       }\n    }\n    //if (text != undefined)\n    document.getElementById(\"marks\").innerHTML = \"Words: \" + len + \" \";\n    \n    if ( len >= 50000 ) {\n      document.getElementById (\"marks\").innerHTML += \"You did it! You hit the 50000 words mark! Congratulations!\";\n    }\n    else if ( len >= 40000 ) {\n      document.getElementById (\"marks\").innerHTML +=  \"You hit the 40000 words mark. Awesome!\";\n    }\n    else if ( len >= 25000 ) {\n      document.getElementById (\"marks\").innerHTML +=  \"You hit the 25000 words mark. Nice work!\";\n    }\n    else if ( len >= 10000 ) {\n      document.getElementById (\"marks\").innerHTML +=  \"You hit the 10000 words mark. Keep it up!\";\n    }\n    else if ( len >= 5000 ) {\n      document.getElementById (\"marks\").innerHTML +=  \"You hit the 5000 words mark. Congrats!\";\n    }\n    else if ( len >= 1667 ) {\n      document.getElementById (\"marks\").innerHTML +=  \"You hit the 1667 words mark. Great job for today!\";\n    }\n    else\n      document.getElementById (\"marks\").innerHTML +=  \"\";\n    // To keep updating the word count by calling the function repeatedly\n   // setTimeout(view_count, 1000);\n    \n    return len;\n  }\n  // View Count function ends.\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createWithContent(ContentState.createFromText(\"Hello There! \\n Start typing here to get started. Use Ctrl/Cmd shortcuts for Bold, Italics, Underline etc.\"))\n  };\n  }\n  componentDidMount(){\n    setTimeout(() => {\n      \n      \n    }, 1000)\n    \n  }\n  onChange = (editorState) => {\n\n    this.setState({editorState});\n              const x = editorState.getCurrentContent().getPlainText('\\u0001')\n\n    console.log(view_count(x));\n  }\n  handleKeyCommand = (command) => {const newState = RichUtils.handleKeyCommand(this.state.editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  render() {\n    return (\n      <div id=\"content\">\n        <h1>Draft.js Editor</h1>\n        <p> Use shortcuts ex. Ctrl/Cmd+B, Crtl/Cmd+U etc. for formatting text while you type.</p>\n        <div id=\"marks\"></div>\n         <div id = \"editbox\" className=\"editor\">\n          <Editor\n            editorState={this.state.editorState}\n            onChange={this.onChange}\n            handleKeyCommand = {this.handleKeyCommand}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}